name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Build Project
        run: npm run build

      - name: List Build Directory
        run: ls -la ./build

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v2
        with:
          name: production-files
          path: ./build

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure deployment runs after successful build

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: production-files
          path: ./build

      - name: List Downloaded Artifacts
        run: ls -la ./build

      - name: Copy files to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ubuntu
          EC2_HOST: ec2-3-90-108-130.compute-1.amazonaws.com
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -r -o StrictHostKeyChecking=no ./build/* $EC2_USER@$EC2_HOST:/var/www/myapp/build

      - name: Deploy on EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ubuntu
          EC2_HOST: ec2-3-90-108-130.compute-1.amazonaws.com
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            cd /var/www/myapp/build
            # Run your deployment commands here, for example:
            npm install --production
            npm run start
          EOF
